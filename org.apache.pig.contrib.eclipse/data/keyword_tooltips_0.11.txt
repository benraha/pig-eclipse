assert=Assert a condition on the data.<br><h4>Syntax</h4>ASSERT alias BY expression [, message];
cogroup=Groups the data in one or more relations.<a name="Syntax-N12F53"></a><br><br><h4>Syntax</h4>alias = CROSS alias, alias [, alias �] [PARTITION BY partitioner] [PARALLEL n];
distinct=Removes duplicate tuples in a relation.<br><a name="Syntax-N13137"></a><h4>Syntax</h4>alias = DISTINCT alias [PARTITION BY partitioner] [PARALLEL n];&nbsp; &nbsp; &nbsp; &nbsp;
cross=Computes the cross product of two or more relations.
cube=Performs cube/rollup operations.Cube operation computes aggregates for all possbile combinations of specified group by dimensions. The number of group by combinations generated by cube for n dimensions will be 2^n.<a name="Syntax-N13008"></a><br><h4>Syntax</h4>alias = CUBE alias BY { CUBE expression | ROLLUP expression }, [ CUBE expression | ROLLUP expression ] [PARALLEL n];
filter=Selects tuples from a relation based on some condition.<br><h4>Syntax</h4>alias = FILTER alias &nbsp;BY expression;
foreach=Generates data transformations based on columns of data.<br><h4>Syntax</h4>alias &nbsp;= FOREACH { block | nested_block };
group=Groups the data in one or more relations.<a name="Syntax-N1344A"></a><br><h4>Syntax</h4>alias = GROUP alias { ALL | BY expression}&nbsp;[, alias ALL | BY expression …]  [USING 'collected' | 'merge'] [PARTITION BY partitioner] [PARALLEL n];
import=Import macros defined in a separate file.<a name="Syntax-N103B4"></a><h4>Syntax</h4>IMPORT 'file-with-macro'; 
join=Performs an outer join of two relations based on common field values.<br><h4>Syntax</h4>alias = JOIN left-alias BY left-alias-column [LEFT|RIGHT|FULL] [OUTER], right-alias BY right-alias-column 
limit=Limits the number of output tuples.<br><h4>Syntax</h4>alias = LIMIT alias &nbsp;n;
load=Loads data from the file system.<br><h4>Syntax</h4>LOAD 'data' [USING function] [AS schema];&nbsp; &nbsp; &nbsp; &nbsp; 
mapreduce=Executes native MapReduce jobs inside a Pig script.<br><h4>Syntax</h4>alias1 = MAPREDUCE 'mr.jar' STORE alias2 INTO 
order=Sorts a relation based on one or more fields.<br><h4>Syntax</h4>alias = ORDER alias BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] …] } [PARALLEL n];
rank=Returns each tuple with the rank within a relation.<br><h4>Syntax</h4>alias = RANK alias [ BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] …] } [DENSE] ];
sample=Selects a random sample of data based on the specified sample size.<br><h4>Syntax</h4>SAMPLE alias size;
split=Partitions a relation into two or more relations.<br><h4>Syntax</h4>SPLIT alias INTO alias IF expression, alias IF expression [, alias IF expression …] [, alias OTHERWISE];
store=Stores or saves results to the file system.<br><h4>Syntax</h4>STORE alias INTO 'directory' [USING function];
stream=Sends data to an external script or program.<br><h4>Syntax</h4>alias = STREAM alias [, alias …] THROUGH {`command` | cmd_alias }&nbsp;[AS schema] ;
union=Computes the union of two or more relations.<br><h4>Syntax</h4>alias = UNION [ONSCHEMA] alias, alias [, alias …];
define=Assigns an alias to a UDF or streaming command.<h4>Syntax: UDF and streaming</h4>DEFINE alias {function | [`command` [input] [output] [ship] [cache] [stderr] ] };
register=Registers a JAR file so that the UDFs in the file can be used.<br><h4>Syntax</h4>REGISTER path;