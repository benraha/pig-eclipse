ASSERT=Assert a condition on the data.<br><h4>Syntax</h4>ASSERT alias BY expression [, message];
COGROUP=Groups the data in one or more relations.<a name="Syntax-N12F53"></a><br><br><h4>Syntax</h4>alias = CROSS alias, alias [, alias …] [PARTITION BY partitioner] [PARALLEL n];
DISTINCT=Removes duplicate tuples in a relation.<br><a name="Syntax-N13137"></a><h4>Syntax</h4>alias = DISTINCT alias [PARTITION BY partitioner] [PARALLEL n];&nbsp; &nbsp; &nbsp; &nbsp;
CROSS=Computes the cross product of two or more relations.
CUBE=Performs cube/rollup operations.Cube operation computes aggregates for all possbile combinations of specified group by dimensions. The number of group by combinations generated by cube for n dimensions will be 2^n.<a name="Syntax-N13008"></a><br><h4>Syntax</h4>alias = CUBE alias BY { CUBE expression | ROLLUP expression }, [ CUBE expression | ROLLUP expression ] [PARALLEL n];
FILTER=Selects tuples from a relation based on some condition.<br><h4>Syntax</h4>alias = FILTER alias &nbsp;BY expression;
FOREACH=Generates data transformations based on columns of data.<br><h4>Syntax</h4>alias &nbsp;= FOREACH { block | nested_block };
GROUP=Groups the data in one or more relations.<a name="Syntax-N1344A"></a><br><h4>Syntax</h4>alias = GROUP alias { ALL | BY expression}&nbsp;[, alias ALL | BY expression â€¦]  [USING 'collected' | 'merge'] [PARTITION BY partitioner] [PARALLEL n];
IMPORT=See <a href="http://pig.apache.org/docs/r0.14.0/cont.html#import-macros">IMPORT (macros)</a>See <a href="http://pig.apache.org/docs/r0.14.0/cont.html#import-macros">IMPORT (macros)</a>Performs an inner join of two or more relations based on common field values.
JOIN= (outer)Performs an outer join of two relations based on common field values.<br><h4>Syntax</h4>alias = JOIN left-alias BY left-alias-column [LEFT|RIGHT|FULL] [OUTER], right-alias BY right-alias-column 
LIMIT=Limits the number of output tuples.<br><h4>Syntax</h4>alias = LIMIT alias &nbsp;n;
LOAD=Loads data from the file system.<br><h4>Syntax</h4>LOAD 'data' [USING function] [AS schema];&nbsp; &nbsp; &nbsp; &nbsp; 
MAPREDUCE=Executes native MapReduce jobs inside a Pig script.<br><h4>Syntax</h4>alias1 = MAPREDUCE 'mr.jar' STORE alias2 INTO 
ORDER BY=Sorts a relation based on one or more fields.<br><h4>Syntax</h4>alias = ORDER alias BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] â€¦] } [PARALLEL n];
RANK=Returns each tuple with the rank within a relation.<br><h4>Syntax</h4>alias = RANK alias [ BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] â€¦] } [DENSE] ];
SAMPLE=Selects a random sample of data based on the specified sample size.<br><h4>Syntax</h4>SAMPLE alias size;
SPLIT=Partitions a relation into two or more relations.<br><h4>Syntax</h4>SPLIT alias INTO alias IF expression, alias IF expression [, alias IF expression â€¦] [, alias OTHERWISE];
STORE=Stores or saves results to the file system.<br><h4>Syntax</h4>STORE alias INTO 'directory' [USING function];
STREAM=Sends data to an external script or program.<br><h4>Syntax</h4>alias = STREAM alias [, alias â€¦] THROUGH {`command` | cmd_alias }&nbsp;[AS schema] ;
UNION=Computes the union of two or more relations.<br><h4>Syntax</h4>alias = UNION [ONSCHEMA] alias, alias [, alias â€¦];
DEFINE= (UDFs, streaming)Assigns an alias to a UDF or streaming command.<h4>Syntax: UDF and streaming</h4>DEFINE alias {function | [`command` [input] [output] [ship] [cache] [stderr] ] };
REGISTER=Registers a JAR file so that the UDFs in the file can be used.<br><h4>Syntax</h4>REGISTER path;